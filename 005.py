# _*_ coding:UTF-8 _*_

# 运算符
## Python运算符大致分为七种

# 算数运算符 [加(+)、减(-)、乘(*)、除(/)、取模(%)、幂运算(**)、取整运算(//)]
## 初始化测试 数据
a = 10
b = 4
c = 0

## 针对七中运算符进行运算
c = a + b
print("a + b=", c)
c = a - b
print("a - b=", c)
c = a * b
print("a * b=", c)
c = a / b
print("a / b=", c)
c = a % b
print("a % b=", c)
c = a ** b
print("a ** b=", c)
c = a // b
print("a // b=", c)
print("===================================================")
# 比较运算符
## >（大于）、<（小于）、==（等于）、！=（不等于)、>=（大于等于）、<=（小于等于）
## 初始化测试数据
a = 23
b = 3
## 进行比较运算
print("a == b:", a ==b)
print("a != b:", a !=b)
print("a > b:", a>b)
print("a < b:", a<b)
print("a >= b:", a>=b)
print("a <= b:", a<=b)
print("===================================================")
# 赋值运算
## +=、-=、=、/=、%=、*=、//=
## 初始化测试数据
a = 5
b = 6
## 进行赋值运算
b = a
print("b = a, b=", b)
b += a
print("b += a, b=", b)
b -= a
print("b -= a, b=", b)
b *= a
print("b *= a, b=", b)
b /= a
print("b /= a, b=", b)
b **= a
print("b **= a, b=", b)
b //= a
print("b //= a, b=", b)
print("===================================================")
# 逻辑运算
## 与、或、非 (and, or, not) 返回值为 True && False
### A and B：当 A 为 False 时，运算结果为 False；否则返回 B 的值； 
### A or B：A 为 True 时，运算结果为 A 的值，否则返回 B 的值；
### not A：A 为 True 时，返回 False，否则返回 True。

## 初始化测试数据
a = 5
b = 6
c = 7
## 执行逻辑运算
print("a > b and a < c :", a > b and a < c)
print("a < b and c :", a < b and c)
print("a > b or c :", a > b or c)
print("a < b or c :" , a < b or c)
print("a or a < c :", a or a < c)
print("not c :", not c)
print("not a < b :", not a < b)
print("===================================================")

# 位运算(直接对整数在内存中的二进制位进行操作)
## &：按位与运算符，参与运算的两个值，如果两个相应位都为1，则该位的结果为1，否则为0；
## |：按位或运算符，只要对应的二个二进位有一个为1时，结果位就为1；
## ^：按位异或运算符，当两对应的二进位相异时，结果为1；
## ~：按位取反运算符，对数据的每个二进制位取反，即把1变为0，把0变为1；
## >>：右移动运算符，把 >> 左边的运算数的各二进位全部右移若干位，>> 右边的数指定移动的位数；
## <<：左移动运算符，运算数的各二进位全部左移若干位，由 << 右边的数指定移动的位数，高位丢弃，低位补0


#a = 0001 0101
#b = 0000 0110
#
#a&b = 0000 0100
#a|b = 0001 0111
#a^b = 0001 0011
#~a = 1110 1010
#a<<2 = 01010100
#a>>2 = 0000 0101

# 成员运算
## Python 还支持成员运算符。介绍成员运算符之前，我们需要提前了解一个概念：数据结构，如字符串、列表、元组、字典。在接下来的章节中我们将详细介绍这些基础的数据结构。字符串、列表、字典，它们就像一个集合，其中包含若干元素，这些元素就是集合的成员；对于一个给定的元素，它有可能在一个给定的集合中，也可能不在，Python 中采用成员运算符来判断元素是否属于成员，成员运算的结果为布尔值，True 或者 False。 
## 初始化字符串和列表
var1 = "abcdefg"
var2 = [1,2,3,4,5,6,7]
a = "cde"
b = 5
c = "cdf"

print("a in var1?", a in var1)
print("b in var2?", b in var2)
print("c in var1?", c in var1)
# 身份运算符
## 身份运算符用于比较两个标识符所引用对象的存储单元，计算结果为布尔值，包含两个运算符：is 和 is not，分别用于判断两个标识符是否引用自一个对象。关于存储单元的比较，涉及到对内存模型的理解以后慢慢编写